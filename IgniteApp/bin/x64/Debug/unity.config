<?xml version="1.0" encoding="utf-8" ?>
<configuration>
	<configSections>
		<!--Unity IOC-->
		<!--<section name="Monitor" type="System.Configuration.NameValueSectionHandler"/>-->
		<!--以NameValue键值/对的形式返回配置节中的信息-->
		<section name="dictionarySample" type="System.Configuration.DictionarySectionHandler,System" />
		<!--以Dictionary字典键值对的形式返回配置节中的信息-->
		<!--<section name="Name" type="System.Configuration.SingleTagSectionHandler" />-->
		<section name="MenuConfiguration" type="IgniteApp.Common.MenuConfiguration,IgniteApp" />
		<section name="Monitor" type="System.Configuration.DictionarySectionHandler"/>
		<!--基础结构。处理 .config 文件中由单个 XML 标记所表示的各配置节。-->
		<!--以NameValue键值/对的形式返回配置节中的信息-->
		<!--<section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Unity.Configuration"/>-->
	</configSections>
	<dictionarySample>
		<add key="myKey" value="myValue" />
	</dictionarySample>
	<!--首页标题菜单-->
	<MenuConfiguration>
		<menus>
			<add title="首页" value="DefaultViewModel"/>
			<add title="用户信息" value="UserInfoViewModel"/>
			<add title="设置" value="SetViewModel"/>
			<add title="监控" value="MonitorViewModel"/>
			<add title="维护" value="MaintionViewModel"/>
			<add title="配方" value="RecipeViewModel"/>
			<add title="标定" value="CalibrationViewModel"/>
		</menus>
	</MenuConfiguration>
	<!--监控标题的菜单-->
	<Monitor>
		<add key="0" value="全部数据" />
		<add key="1" value="报警数据" />
		<add key="2" value="PLC数据" />
	</Monitor>
	<Man>
		<add key="老大" value="曹操" />
		<add key="老二" value="典韦" />
		<add key="老三" value="郭嘉" />
	</Man>
	<unity>
		<containers>
			<container name="ILoginContainer">
				<!--Unity.Interface.IQuery指类/接口的完成类型名，Unity.Interface指类/接口所在的dll-->
				<register type="MvvmLight.Lx.Admin.IServices.ILoginservice,MvvmLight.Lx.Admin.IServices" mapTo="MvvmLight.Lx.Admin.Services.LoginService, MvvmLight.Lx.Admin.Services"/>
			</container>
		</containers>
	</unity>
</configuration>

<!--<unity xmlns="http://schemas.microsoft.com/practices/2010/unity">
	 -->
<!--接口和实现存在于哪些dll这里要写完整-->
<!--
	<assembly name="不带后缀名的dll名称"/>

	-->
<!--引入各个类型所在的命名空间-->
<!--
	<namespace name="命名空间"/>

	<container>
		-->
<!--写注册关系-->
<!--
		<register type="接口类型" mapTo="实现类型" name="">
			<constructor>
				-->
<!--指定构造函数参数-->
<!--
				　　　　　　　　<param name="参数名称" value="值"></param>
				　　　　　
			</constructor>　　　　　　-->
<!--指定生命周期-->
<!--　　　　　<lifetime type="singleton"></lifetime>
			　　　　
		</register>
	</container>
</unity>-->